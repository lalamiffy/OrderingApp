{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { deleteToken, getToken, storeToken } from \"./TokenStorage\";\nvar BASE_URL = 'http://localhost:3913/';\nexport function login(_x, _x2) {\n  return _login.apply(this, arguments);\n}\nfunction _login() {\n  _login = _asyncToGenerator(function* (username, password) {\n    var url = new URL('api/v1/token', BASE_URL);\n    var response = yield fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: username,\n        password: password\n      })\n    });\n    var token = yield response.text();\n    yield storeToken(token);\n    return {\n      authenticated: true,\n      token: token\n    };\n  });\n  return _login.apply(this, arguments);\n}\nexport function signOut() {\n  return _signOut.apply(this, arguments);\n}\nfunction _signOut() {\n  _signOut = _asyncToGenerator(function* () {\n    deleteToken();\n  });\n  return _signOut.apply(this, arguments);\n}\nexport function fetchSecuredResource() {\n  return _fetchSecuredResource.apply(this, arguments);\n}\nfunction _fetchSecuredResource() {\n  _fetchSecuredResource = _asyncToGenerator(function* () {\n    var url = new URL('api/v1/test/authorize', BASE_URL);\n    var token = yield getToken();\n    var response = yield fetch(url, {\n      method: 'GET',\n      headers: {\n        \"Authorization\": \"Bearer \" + token\n      }\n    });\n    if (response.status === 401) {\n      throw new Error('You must be authenticated to access this resource!');\n    } else if (response.status === 403) {\n      throw new Error('You do not have the authorization to access this resource!');\n    }\n    var data = yield response.text();\n    return {\n      data: data\n    };\n  });\n  return _fetchSecuredResource.apply(this, arguments);\n}","map":{"version":3,"names":["deleteToken","getToken","storeToken","BASE_URL","login","_x","_x2","_login","apply","arguments","_asyncToGenerator","username","password","url","URL","response","fetch","method","headers","body","JSON","stringify","email","token","text","authenticated","signOut","_signOut","fetchSecuredResource","_fetchSecuredResource","status","Error","data"],"sources":["D:/Users/jianna.huang/Desktop/6.6/services/LoginApiService.js"],"sourcesContent":["import { deleteToken, getToken, storeToken } from \"./TokenStorage\";\r\n\r\n//const BASE_URL = 'http://10.0.2.2:3913';\r\nconst BASE_URL = 'http://localhost:3913/'\r\n\r\nexport async function login(username, password) {\r\n    const url = new URL('api/v1/token', BASE_URL);\r\n\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            email:username,\r\n            password:password\r\n        })        \r\n    });\r\n\r\n\r\n\r\n    // May need to change this at some point\r\n    const token = await response.text();\r\n\r\n    await storeToken(token);\r\n\r\n    return {\r\n        authenticated: true,\r\n        token: token\r\n    };\r\n}\r\n\r\nexport async function signOut() {\r\n    deleteToken();\r\n}\r\n\r\nexport async function fetchSecuredResource() {\r\n     const url = new URL('api/v1/test/authorize', BASE_URL);\r\n     const token = await getToken();\r\n\r\n     const response = await fetch(url, {\r\n                 method: 'GET',\r\n   headers: {\r\n             \"Authorization\": `Bearer ${token}`\r\n         }\r\n     });\r\n\r\n     if (response.status === 401) {\r\n         throw new Error('You must be authenticated to access this resource!');\r\n     } else if (response.status === 403) {\r\n         throw new Error('You do not have the authorization to access this resource!');\r\n     }\r\n\r\n     const data = await response.text();\r\n    \r\n     return { data: data };\r\n }\r\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,EAAEC,UAAU;AAG1C,IAAMC,QAAQ,GAAG,wBAAwB;AAEzC,gBAAsBC,KAAKA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAyB1B,SAAAF,OAAA;EAAAA,MAAA,GAAAG,iBAAA,CAzBM,WAAqBC,QAAQ,EAAEC,QAAQ,EAAE;IAC5C,IAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,cAAc,EAAEX,QAAQ,CAAC;IAE7C,IAAMY,QAAQ,SAASC,KAAK,CAACH,GAAG,EAAE;MAC9BI,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,KAAK,EAACX,QAAQ;QACdC,QAAQ,EAACA;MACb,CAAC;IACL,CAAC,CAAC;IAKF,IAAMW,KAAK,SAASR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAEnC,MAAMtB,UAAU,CAACqB,KAAK,CAAC;IAEvB,OAAO;MACHE,aAAa,EAAE,IAAI;MACnBF,KAAK,EAAEA;IACX,CAAC;EACL,CAAC;EAAA,OAAAhB,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,gBAAsBiB,OAAOA,CAAA;EAAA,OAAAC,QAAA,CAAAnB,KAAA,OAAAC,SAAA;AAAA;AAE5B,SAAAkB,SAAA;EAAAA,QAAA,GAAAjB,iBAAA,CAFM,aAAyB;IAC5BV,WAAW,CAAC,CAAC;EACjB,CAAC;EAAA,OAAA2B,QAAA,CAAAnB,KAAA,OAAAC,SAAA;AAAA;AAED,gBAAsBmB,oBAAoBA,CAAA;EAAA,OAAAC,qBAAA,CAAArB,KAAA,OAAAC,SAAA;AAAA;AAoBxC,SAAAoB,sBAAA;EAAAA,qBAAA,GAAAnB,iBAAA,CApBK,aAAsC;IACxC,IAAMG,GAAG,GAAG,IAAIC,GAAG,CAAC,uBAAuB,EAAEX,QAAQ,CAAC;IACtD,IAAMoB,KAAK,SAAStB,QAAQ,CAAC,CAAC;IAE9B,IAAMc,QAAQ,SAASC,KAAK,CAACH,GAAG,EAAE;MACtBI,MAAM,EAAE,KAAK;MAC3BC,OAAO,EAAE;QACC,eAAe,cAAYK;MAC/B;IACJ,CAAC,CAAC;IAEF,IAAIR,QAAQ,CAACe,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;IACzE,CAAC,MAAM,IAAIhB,QAAQ,CAACe,MAAM,KAAK,GAAG,EAAE;MAChC,MAAM,IAAIC,KAAK,CAAC,4DAA4D,CAAC;IACjF;IAEA,IAAMC,IAAI,SAASjB,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,OAAO;MAAEQ,IAAI,EAAEA;IAAK,CAAC;EACzB,CAAC;EAAA,OAAAH,qBAAA,CAAArB,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}